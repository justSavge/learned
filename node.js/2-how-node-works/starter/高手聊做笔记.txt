什么是node.js?
node.js是一个包，类似于浏览器，提供js运行的环境。
node.js由谷歌的v8引擎和libuv。还有其他的库如http-parser,c-ares...so on
与正常人想的，node.js肯定是由js写的，是咱们js高手开发用js写的服务于js工作者的东西。
其实node主要是由c++写的：
如v8是由js和c++写的，而libuv则是纯c++写的。
libuv是个啥呢。
它为node提供了四个额外的线程（最高可以加到128个），node本身是只有一个主线程的，很容易阻塞，需要找个哥们来帮他处理一些巨大的工作。
这四个线程与主线程无关。
当主线程解析代码，执行顶层代码，导入包，注册好回调函数的时候就会进行事件循环(event loop),将一些繁重的工作抛给这个额外的线程处理。
现在是重点时间，node的核心部分：event loop.
1.所有的回调函数都会在event loop当中执行，基本上所有的非顶部代码都会在event loop当中执行（当然，某些会被安排到额外线程执行）。
2.node是围绕callback funtion(回调函数)构建的。
3.事件驱动构架：一，事件被触发。二，事件循环获取（收集？）他们。三，回调函数被调用。
注释上一行：node是依靠事件驱动的，如setTimeout执行到了时间就会发出一个事件，事件循环就会拾取（接收？）这个事件，按照代码执行回调函数。当然，遇上繁重的事件就会抛给其他的四个哥们（额外的线程）。
事件循环（4个顺序）
callback queues.举个例子，setTimeout会在时间到了以后第一时间执行它的回调函数，当时如果恰好有其他的回调函数在执行，那么它也要等这哥们执行完了以后执行（执行完了以后的第一时间）。事实上在学过了计算机组成原理，有一点我自己的思路，就是说它是一个高优先级事件。
第一是执行timer,上一行说了。
第二是执行i/o（input/output）,在这里主要是指与文件，网络的交互。
第三是setlmmediate callbacks(看见这个怪东西就。。。也没有翻译)。是一个特殊的时间回调函数。如果我们像尽快执行某个回调函数，就可以使用这个（在前2个大哥后执行）。
第四的关闭回调函数，放在这里也只是为了完整（好看），意义如其名。
ps:还有2个微处理队列（promise还记得一点，还有一个nextTick(),不知道是什么），会在当前队列（不管是1，2，3）执行后立刻执行（感觉也是一个高优先级队列）
转到循环，当时间循环到了第四部分就会进行判断，如果还有未决的timer,io就会继续循环；如果事件都做完了，就退出程序，结束了。
举个例子可以更加清楚：我在上一章做的node小玩意用到的监听服务就会让node一直执行而不是退出。还有读取文件啊，诸此之类，会保持node运行。
小警告：不要在事件循环当中做太复杂的东西，不要有sync等东西，这些玩意都会阻塞node.