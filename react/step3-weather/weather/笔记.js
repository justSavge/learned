// import { useEffect } from "react"

//effect hook,效果钩子
// 在React当中的另一个强大工具
// useEffect(fun,[])
//简单的不说
//和state一样，每次依赖数组更新，组件更新
//3种情况
//1.useEffect(fun,[z,x])
//2.useEffect(fun,[]),只执行一次，很安全
//3.useEffect(fun)，千万别以为这个执行一次，这个的依赖数组是一切参数，当任何参数改变都会执行
//认为effect是在渲染时调用？错。其实在浏览器绘制（React完成DOM变更并计划更新浏览器界面之后）之后执行（也许是effect需要大量的数据）
//在执行effect以后就是继续渲染组件，提交修改，浏览器绘制，effect调用这样，周而复始，直到组件不再挂载。
//如修改参数以后，执行组件，渲染...，浏览器绘制，执行Effect内的函数
//修改了state，导致Effect的依赖改变，会先渲染一遍组件，然后执行Effect（而Effect也修改一个State）,会再次渲染组件，会执行2次，所以要小心使用，以防无限执行

// 当我们在不断使用又副作用的函数，组件时，就要提及另一个生命周期的重要的东西
// 清除
// 清除发生在useEffect效果发生之前以及生命周期的最后一个执行,用于清理上一次的effect
//实现方法,在useEffect的回调函数里返回这个清除函数(其实就是一个普通函数)
// 也就是卸载组件与刚好执行effect之前,可以看我的截图
// 一般来说,最好每个useEffect只执行一个功能,哪怕少,哪怕简单.为了方便于清理上一次的Effect

//使用hook
//使用hook(钩子)的函数很多，有几乎20个，但重点只有四个，useState,useEffect,还有2个没学，剩下的很少使用。
//当然也可以自己定义钩子函数，不过很复杂，没学。。。
//使用这些函数还有2个规则
//其中一个是必须是顶部函数，也就是不能被if等条件束缚，为什么？举个例子，在顶部定义useState4个useEffect3个，在feber里面会存储这7个，按执行顺序链接起来存储，这是一种常用的数据结构，这时判定通过增加了state，那么就会报错
//不过在es-lint语法下，我们不会做错
//不过这也告诉我们不要破坏hook顺序，哪怕你再定义之前返回一个jsx，也破坏了，导致不能使用
//二只能在React函数中使用，如组件函数，custom funtion
//useRef:
//不能修改类型？没试过，不知道
//1.用于绑定Dom元素
//2.用于作为持久化变量，记录数据（let 每次更新都会重新赋值）
